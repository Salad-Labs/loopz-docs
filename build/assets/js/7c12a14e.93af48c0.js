"use strict";(self.webpackChunksdk=self.webpackChunksdk||[]).push([[4419],{3020:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"guides/chat","title":"Chat Guide","description":"Complete guide to the encrypted chat system in Loopz SDK","source":"@site/docs/guides/chat.md","sourceDirName":"guides","slug":"/guides/chat","permalink":"/loopz-docs/docs/guides/chat","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/chat.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"chat","title":"Chat Guide","sidebar_label":"Chat","sidebar_position":2,"keywords":["chat","messaging","encryption","E2E","real-time","conversation"],"description":"Complete guide to the encrypted chat system in Loopz SDK"},"sidebar":"tutorialSidebar","previous":{"title":"Authentication","permalink":"/loopz-docs/docs/guides/authentication"},"next":{"title":"Trading","permalink":"/loopz-docs/docs/guides/trading"}}');var a=s(4848),i=s(8453);const o={id:"chat",title:"Chat Guide",sidebar_label:"Chat",sidebar_position:2,keywords:["chat","messaging","encryption","E2E","real-time","conversation"],description:"Complete guide to the encrypted chat system in Loopz SDK"},r="Chat Guide",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Step 1: Connect to Chat",id:"step-1-connect-to-chat",level:3},{value:"Step 2: Sync Messages",id:"step-2-sync-messages",level:3},{value:"Conversations",id:"conversations",level:2},{value:"Creating a Conversation",id:"creating-a-conversation",level:3},{value:"Getting Conversations",id:"getting-conversations",level:3},{value:"Messaging",id:"messaging",level:2},{value:"Sending Text Messages",id:"sending-text-messages",level:3},{value:"Sending Trade Proposals",id:"sending-trade-proposals",level:3},{value:"Loading Messages",id:"loading-messages",level:3},{value:"Real-time Events",id:"real-time-events",level:2},{value:"Message Events",id:"message-events",level:3},{value:"Conversation Events",id:"conversation-events",level:3},{value:"Encryption Details",id:"encryption-details",level:2},{value:"How E2E Encryption Works",id:"how-e2e-encryption-works",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Message Reactions",id:"message-reactions",level:3},{value:"Muting Conversations",id:"muting-conversations",level:3},{value:"Typing Indicators",id:"typing-indicators",level:3},{value:"Message Search",id:"message-search",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Connection Management",id:"1-connection-management",level:3},{value:"2. Message Pagination",id:"2-message-pagination",level:3},{value:"3. Error Handling",id:"3-error-handling",level:3},{value:"4. Optimistic Updates",id:"4-optimistic-updates",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"&quot;Cannot connect&quot; Error",id:"cannot-connect-error",level:3},{value:"&quot;Cannot decrypt message&quot; Error",id:"cannot-decrypt-message-error",level:3},{value:"Messages Not Syncing",id:"messages-not-syncing",level:3},{value:"Performance Issues",id:"performance-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"chat-guide",children:"Chat Guide"})}),"\n",(0,a.jsx)(n.p,{children:"The Loopz SDK provides a comprehensive encrypted chat system designed specifically for trading contexts. All messages are end-to-end encrypted using a hybrid RSA/AES encryption scheme."}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"Key features of the chat system:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"End-to-End Encryption"}),": All messages encrypted with RSA + AES"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Real-time Messaging"}),": WebSocket-based for instant delivery"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Trade Context"}),": Special message types for proposals and NFT sharing"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Offline Support"}),": Local storage with Dexie for offline access"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Group Chats"}),": Support for multi-party trading discussions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Message Types"}),": Text, attachments, trade proposals, NFT sharing"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[User Authenticates] --\x3e B[Generate E2E Keys]\n    B --\x3e C[Connect to Chat]\n    C --\x3e D[Sync Messages]\n\n    E[Send Message] --\x3e F[Encrypt with AES]\n    F --\x3e G[Send via WebSocket]\n\n    H[Receive Message] --\x3e I[Decrypt with AES]\n    I --\x3e J[Store Locally]\n\n    K[Conversation Keys] --\x3e L[Encrypted with RSA]\n    L --\x3e M[Shared with Members]\n"})}),"\n",(0,a.jsx)(n.h2,{id:"initialization",children:"Initialization"}),"\n",(0,a.jsx)(n.h3,{id:"step-1-connect-to-chat",children:"Step 1: Connect to Chat"}),"\n",(0,a.jsx)(n.p,{children:"After authentication, connect to the chat system:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { useLoopzChat } from "@salad-labs/loopz-typescript"\n\nfunction ChatConnection() {\n  const { connect, disconnect, isConnected, isConnecting, canChat } =\n    useLoopzChat()\n\n  useEffect(() => {\n    const initChat = async () => {\n      if (canChat && !isConnected) {\n        try {\n          await connect()\n          console.log("Chat connected")\n        } catch (error) {\n          console.error("Chat connection failed:", error)\n        }\n      }\n    }\n\n    initChat()\n\n    // Cleanup on unmount\n    return () => {\n      if (isConnected) {\n        disconnect()\n      }\n    }\n  }, [canChat, isConnected])\n\n  if (!canChat) {\n    return <div>Setting up encryption keys...</div>\n  }\n\n  return <div>Status: {isConnected ? "Connected" : "Disconnected"}</div>\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-sync-messages",children:"Step 2: Sync Messages"}),"\n",(0,a.jsx)(n.p,{children:"Sync retrieves historical messages and sets up real-time listeners:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'function ChatSync() {\n  const { sync, isSynced, isSyncing } = useLoopzChat({\n    // Event handlers\n    onSync: () => {\n      console.log("Sync completed")\n    },\n    onSyncError: (error) => {\n      console.error("Sync failed:", error)\n    },\n    onSyncUpdate: (progress) => {\n      console.log("Sync progress:", progress)\n    },\n  })\n\n  useEffect(() => {\n    const startSync = async () => {\n      if (!isSynced && !isSyncing) {\n        await sync()\n      }\n    }\n\n    startSync()\n  }, [])\n\n  return <div>Sync Status: {isSynced ? "Synced" : "Syncing..."}</div>\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"conversations",children:"Conversations"}),"\n",(0,a.jsx)(n.h3,{id:"creating-a-conversation",children:"Creating a Conversation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { useLoopz } from "@salad-labs/loopz-typescript"\nimport { Crypto } from "@salad-labs/loopz-typescript"\n\nfunction CreateConversation() {\n  const { instance } = useLoopz()\n\n  const createPrivateChat = async (recipientDid: string) => {\n    try {\n      // Generate conversation encryption keys\n      const conversationAESKey = Crypto.generateBase64Key_AES256()\n      const conversationIVKey = Crypto.generateBase64IV_128Bit()\n\n      // Create conversation\n      const result = await instance.chat.createConversation({\n        name: "Trade Discussion",\n        description: "Discussing NFT trade",\n        type: "PRIVATE",\n        conversationKeys: {\n          conversationAESKey,\n          conversationIVKey,\n        },\n      })\n\n      // Add recipient\n      await instance.chat.joinMembersToConversation({\n        conversationId: result.conversationId,\n        members: [\n          {\n            userId: recipientDid,\n            encryptedConversationAESKey: "encrypted_key", // Encrypt with recipient\'s public key\n            encryptedConversationIVKey: "encrypted_iv",\n          },\n        ],\n      })\n\n      console.log("Conversation created:", result.conversationId)\n      return result\n    } catch (error) {\n      console.error("Failed to create conversation:", error)\n    }\n  }\n\n  return (\n    <button onClick={() => createPrivateChat("recipient-did")}>\n      Start Chat\n    </button>\n  )\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"getting-conversations",children:"Getting Conversations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'function ConversationsList() {\n  const { instance } = useLoopz()\n  const [conversations, setConversations] = useState([])\n\n  useEffect(() => {\n    const loadConversations = async () => {\n      try {\n        const convs = await instance.chat.getConversations()\n        setConversations(convs)\n      } catch (error) {\n        console.error("Failed to load conversations:", error)\n      }\n    }\n\n    loadConversations()\n  }, [])\n\n  return (\n    <div>\n      {conversations.map((conv) => (\n        <div key={conv.id}>\n          <h3>{conv.name}</h3>\n          <p>{conv.description}</p>\n          <p>Type: {conv.type}</p>\n          <p>Members: {conv.membersIds?.length || 0}</p>\n        </div>\n      ))}\n    </div>\n  )\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"messaging",children:"Messaging"}),"\n",(0,a.jsx)(n.h3,{id:"sending-text-messages",children:"Sending Text Messages"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'function MessageComposer({ conversationId }) {\n  const { instance } = useLoopz()\n  const [message, setMessage] = useState("")\n\n  const sendMessage = async () => {\n    if (!message.trim()) return\n\n    try {\n      const sent = await instance.chat.sendMessage({\n        conversationId,\n        content: message,\n        type: MessageType.Textual,\n      })\n\n      console.log("Message sent:", sent.id)\n      setMessage("")\n    } catch (error) {\n      console.error("Failed to send message:", error)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        placeholder="Type a message..."\n      />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  )\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"sending-trade-proposals",children:"Sending Trade Proposals"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { MessageType } from "@salad-labs/loopz-typescript"\n\nfunction TradeProposalMessage({ conversationId }) {\n  const { instance } = useLoopz()\n\n  const sendTradeProposal = async () => {\n    try {\n      const proposal = {\n        assets: {\n          offered: [\n            {\n              token: "0x...", // NFT contract\n              tokenId: "123",\n              amount: "1",\n              type: "ERC721",\n            },\n          ],\n          wanted: [\n            {\n              token: "0x...", // Token contract\n              amount: "1000000000000000000", // 1 ETH\n              type: "ERC20",\n            },\n          ],\n        },\n        message: "I would like to trade this NFT for 1 ETH",\n      }\n\n      const sent = await instance.chat.sendMessage({\n        conversationId,\n        content: proposal,\n        type: MessageType.TradeProposal,\n      })\n\n      console.log("Trade proposal sent:", sent.id)\n    } catch (error) {\n      console.error("Failed to send proposal:", error)\n    }\n  }\n\n  return <button onClick={sendTradeProposal}>Send Trade Proposal</button>\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"loading-messages",children:"Loading Messages"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'function MessagesList({ conversationId }) {\n  const { instance } = useLoopz()\n  const [messages, setMessages] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const loadMessages = async () => {\n      try {\n        const msgs = await instance.chat.getMessages(conversationId, {\n          skip: 0,\n          take: 50,\n        })\n\n        setMessages(msgs)\n      } catch (error) {\n        console.error("Failed to load messages:", error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    loadMessages()\n  }, [conversationId])\n\n  if (loading) return <div>Loading messages...</div>\n\n  return (\n    <div>\n      {messages.map((msg) => (\n        <MessageItem key={msg.id} message={msg} />\n      ))}\n    </div>\n  )\n}\n\nfunction MessageItem({ message }) {\n  const { account } = useLoopzAuth()\n  const isOwn = message.userId === account?.dynamoDBUserID\n\n  return (\n    <div className={isOwn ? "sent" : "received"}>\n      <p>{message.user.username}</p>\n      <p>{message.content}</p>\n      <p>{new Date(message.createdAt).toLocaleString()}</p>\n\n      {message.type === "TRADE_PROPOSAL" && (\n        <TradeProposalView proposal={message.content} />\n      )}\n    </div>\n  )\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"real-time-events",children:"Real-time Events"}),"\n",(0,a.jsx)(n.h3,{id:"message-events",children:"Message Events"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'function ChatWithRealtime() {\n  const { instance } = useLoopz()\n  const [messages, setMessages] = useState([])\n\n  const { isConnected } = useLoopzChat({\n    // New message received\n    onMessageReceived: (message) => {\n      console.log("New message:", message)\n      setMessages((prev) => [...prev, message])\n    },\n\n    // Message updated (edited)\n    onMessageUpdated: (message) => {\n      setMessages((prev) =>\n        prev.map((m) => (m.id === message.id ? message : m))\n      )\n    },\n\n    // Message deleted\n    onMessageDeleted: (messageId) => {\n      setMessages((prev) => prev.filter((m) => m.id !== messageId))\n    },\n\n    // Reaction added\n    onReactionAdded: ({ messageId, reaction }) => {\n      console.log("Reaction added to message:", messageId)\n    },\n  })\n\n  return <MessagesList messages={messages} />\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"conversation-events",children:"Conversation Events"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const {} = useLoopzChat({\n  // New conversation created\n  onConversationCreated: (conversation) => {\n    console.log("New conversation:", conversation)\n  },\n\n  // Conversation updated\n  onConversationUpdated: (conversation) => {\n    console.log("Conversation updated:", conversation)\n  },\n\n  // Added to conversation\n  onConversationNewMembers: ({ conversationId, members }) => {\n    console.log("New members added:", members)\n  },\n\n  // Conversation muted/unmuted\n  onConversationMuted: (conversationId) => {\n    console.log("Conversation muted:", conversationId)\n  },\n})\n'})}),"\n",(0,a.jsx)(n.h2,{id:"encryption-details",children:"Encryption Details"}),"\n",(0,a.jsx)(n.h3,{id:"how-e2e-encryption-works",children:"How E2E Encryption Works"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"User Keys"}),": Each user has an RSA key pair (4096-bit)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Conversation Keys"}),": Each conversation has AES-256 + IV keys"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Key Distribution"}),": AES keys encrypted with each member's RSA public key"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Message Encryption"}),": All messages encrypted with conversation's AES keys"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Example: Manual encryption (SDK handles this automatically)\nimport { Crypto } from "@salad-labs/loopz-typescript"\n\n// Generate conversation keys\nconst aesKey = Crypto.generateBase64Key_AES256()\nconst ivKey = Crypto.generateBase64IV_128Bit()\n\n// Encrypt message\nconst encrypted = Crypto.encryptAES_CBC(\n  "Hello, this is encrypted!",\n  aesKey,\n  ivKey\n)\n\n// Decrypt message\nconst decrypted = Crypto.decryptAES_CBC(encrypted, aesKey, ivKey)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,a.jsx)(n.h3,{id:"message-reactions",children:"Message Reactions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Add reaction\nawait instance.chat.addReactionToMessage({\n  messageId: "message-id",\n  conversationId: "conversation-id",\n  reaction: "\ud83d\udc4d",\n})\n\n// Remove reaction\nawait instance.chat.removeReactionFromMessage({\n  messageId: "message-id",\n  conversationId: "conversation-id",\n  reaction: "\ud83d\udc4d",\n})\n'})}),"\n",(0,a.jsx)(n.h3,{id:"muting-conversations",children:"Muting Conversations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Mute conversation\nawait conversation.muteConversation({ duration: 3600 }) // 1 hour\n\n// Unmute\nawait conversation.unmuteConversation()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"typing-indicators",children:"Typing Indicators"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Note: Implement with custom solution\n// The SDK doesn't have built-in typing indicators\n"})}),"\n",(0,a.jsx)(n.h3,{id:"message-search",children:"Message Search"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Search messages locally\nconst results = await instance.chat.searchMessages({\n  query: "NFT trade",\n  conversationId: "optional-filter",\n  limit: 20,\n})\n'})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"1-connection-management",children:"1. Connection Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Always check connection status\nif (!isConnected) {\n  await connect()\n}\n\n// Handle reconnections\nwindow.addEventListener("online", () => {\n  if (!isConnected) {\n    reconnect()\n  }\n})\n'})}),"\n",(0,a.jsx)(n.h3,{id:"2-message-pagination",children:"2. Message Pagination"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const loadMoreMessages = async (lastMessageId) => {\n  const older = await instance.chat.getMessages(conversationId, {\n    before: lastMessageId,\n    limit: 20,\n  })\n\n  setMessages((prev) => [...older, ...prev])\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-error-handling",children:"3. Error Handling"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'try {\n  await sendMessage(content)\n} catch (error) {\n  if (error.message.includes("not connected")) {\n    await reconnect()\n    await sendMessage(content) // Retry\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"4-optimistic-updates",children:"4. Optimistic Updates"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Show message immediately, update when confirmed\nconst optimisticMessage = {\n  id: "temp-" + Date.now(),\n  content,\n  status: "sending",\n}\n\nsetMessages((prev) => [...prev, optimisticMessage])\n\ntry {\n  const sent = await sendMessage(content)\n  // Replace optimistic message with real one\n  setMessages((prev) =>\n    prev.map((m) => (m.id === optimisticMessage.id ? sent : m))\n  )\n} catch (error) {\n  // Mark as failed\n  setMessages((prev) =>\n    prev.map((m) =>\n      m.id === optimisticMessage.id ? { ...m, status: "failed" } : m\n    )\n  )\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Key Storage"}),": Private keys are encrypted and stored locally"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Key Rotation"}),": Not currently supported - keys are permanent"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Forward Secrecy"}),": Not implemented - consider for sensitive discussions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Message Retention"}),": Messages stored indefinitely unless manually deleted"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Metadata"}),": Message metadata (sender, timestamp) not encrypted"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"cannot-connect-error",children:'"Cannot connect" Error'}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Check if user is authenticated"}),"\n",(0,a.jsxs)(n.li,{children:["Verify E2E keys are generated (",(0,a.jsx)(n.code,{children:"canChat"})," should be true)"]}),"\n",(0,a.jsx)(n.li,{children:"Check network connectivity"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"cannot-decrypt-message-error",children:'"Cannot decrypt message" Error'}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"User may have lost their private key"}),"\n",(0,a.jsx)(n.li,{children:"Conversation keys may be corrupted"}),"\n",(0,a.jsx)(n.li,{children:"Try rejoining the conversation"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"messages-not-syncing",children:"Messages Not Syncing"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Ensure ",(0,a.jsx)(n.code,{children:"sync()"})," was called after connection"]}),"\n",(0,a.jsx)(n.li,{children:"Check if storage is enabled"}),"\n",(0,a.jsx)(n.li,{children:"Verify WebSocket connection is stable"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Limit message history loaded"}),"\n",(0,a.jsx)(n.li,{children:"Implement virtual scrolling for large conversations"}),"\n",(0,a.jsx)(n.li,{children:"Use pagination for message lists"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Explore ",(0,a.jsx)(n.a,{href:"/loopz-docs/docs/guides/trading",children:"Trading Features"})," for trade proposals"]}),"\n",(0,a.jsxs)(n.li,{children:["Check ",(0,a.jsx)(n.a,{href:"/loopz-docs/docs/use-cases",children:"Use Cases"})," for real-world examples"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var t=s(6540);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);