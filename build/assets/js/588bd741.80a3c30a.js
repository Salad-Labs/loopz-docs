"use strict";(self.webpackChunksdk=self.webpackChunksdk||[]).push([[4324],{3014:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"getting-started/quick-start","title":"Quick Start Guide","description":"Get up and running with the Loopz TypeScript SDK in minutes","source":"@site/docs/getting-started/quick-start.md","sourceDirName":"getting-started","slug":"/getting-started/quick-start","permalink":"/loopz-docs/docs/getting-started/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/quick-start.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"quick-start","title":"Quick Start Guide","sidebar_label":"Quick Start","sidebar_position":3,"keywords":["quick start","tutorial","getting started","example","react","authentication","chat"],"description":"Get up and running with the Loopz TypeScript SDK in minutes"},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/loopz-docs/docs/getting-started/installation"},"next":{"title":"Guides","permalink":"/loopz-docs/docs/category/guides"}}');var i=t(4848),a=t(8453);const s={id:"quick-start",title:"Quick Start Guide",sidebar_label:"Quick Start",sidebar_position:3,keywords:["quick start","tutorial","getting started","example","react","authentication","chat"],description:"Get up and running with the Loopz TypeScript SDK in minutes"},r="Quick Start Guide",c={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Initialize the SDK",id:"step-1-initialize-the-sdk",level:2},{value:"Option A: React Integration (Recommended)",id:"option-a-react-integration-recommended",level:3},{value:"Option B: Vanilla JavaScript",id:"option-b-vanilla-javascript",level:3},{value:"Step 2: Authentication",id:"step-2-authentication",level:2},{value:"Using React Hooks",id:"using-react-hooks",level:3},{value:"Using Vanilla JavaScript",id:"using-vanilla-javascript",level:3},{value:"Step 3: Setting Up Chat",id:"step-3-setting-up-chat",level:2},{value:"Using React Hooks",id:"using-react-hooks-1",level:3},{value:"Creating a Conversation",id:"creating-a-conversation",level:3},{value:"Sending Messages",id:"sending-messages",level:3},{value:"Step 4: Creating a Trade Proposal",id:"step-4-creating-a-trade-proposal",level:2},{value:"Step 5: Handling Orders",id:"step-5-handling-orders",level:2},{value:"Complete Example: Trading Chat Room",id:"complete-example-trading-chat-room",level:2},{value:"Common Issues",id:"common-issues",level:2},{value:"&quot;Not initialized&quot; Error",id:"not-initialized-error",level:3},{value:"Chat Connection Failed",id:"chat-connection-failed",level:3},{value:"Missing Peer Dependencies",id:"missing-peer-dependencies",level:3},{value:"Support",id:"support",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"quick-start-guide",children:"Quick Start Guide"})}),"\n",(0,i.jsx)(e.p,{children:"This guide will help you get started with the Loopz SDK in a React application. We'll cover initialization, authentication, and basic trading/chat functionality."}),"\n",(0,i.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(e.p,{children:"Before starting, ensure you have:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Completed the ",(0,i.jsx)(e.a,{href:"./installation",children:"installation steps"})]}),"\n",(0,i.jsx)(e.li,{children:"Your Loopz API key"}),"\n",(0,i.jsx)(e.li,{children:"Your Privy App ID"}),"\n",(0,i.jsx)(e.li,{children:"A React application (v18+)"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"step-1-initialize-the-sdk",children:"Step 1: Initialize the SDK"}),"\n",(0,i.jsx)(e.p,{children:"There are two ways to initialize the Loopz SDK: using React components or vanilla JavaScript."}),"\n",(0,i.jsx)(e.h3,{id:"option-a-react-integration-recommended",children:"Option A: React Integration (Recommended)"}),"\n",(0,i.jsxs)(e.p,{children:["Wrap your application with the ",(0,i.jsx)(e.code,{children:"LoopzProvider"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:'// App.tsx\nimport { LoopzProvider } from "@salad-labs/loopz-typescript"\n\nfunction App() {\n  const loopzConfig = {\n    apiKey: process.env.NEXT_PUBLIC_LOOPZ_API_KEY!,\n    privyAppId: process.env.NEXT_PUBLIC_PRIVY_APP_ID!,\n    privyClientConfig: {\n      // Privy configuration options\n      embeddedWallets: {\n        createOnLogin: "users-without-wallets",\n      },\n      appearance: {\n        theme: "light",\n        accentColor: "#6B5FFF",\n      },\n    },\n    // Internationalization settings\n    intl: {\n      locale: "en",\n      messages: {\n        en: {\n          welcomeMessage: "Welcome to our marketplace!",\n        },\n      },\n    },\n    // Branding URLs\n    logoURL: "https://your-domain.com/logo.png",\n    tosURL: "https://your-domain.com/terms",\n    privacyURL: "https://your-domain.com/privacy",\n  }\n\n  // Optional: Chat configuration\n  const chatConfig = {\n    autoConnect: true, // Auto-connect when authenticated\n    autoSync: true, // Auto-sync messages\n    syncingTime: 30000, // Sync interval in milliseconds\n  }\n\n  return (\n    <LoopzProvider\n      config={loopzConfig}\n      chatConfig={chatConfig}\n      devMode={true} // Enable dev mode for debugging\n    >\n      <YourApp />\n    </LoopzProvider>\n  )\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"option-b-vanilla-javascript",children:"Option B: Vanilla JavaScript"}),"\n",(0,i.jsx)(e.p,{children:"For non-React environments or more control:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'import { Loopz } from "@salad-labs/loopz-typescript"\n\nasync function initializeLoopz() {\n  const loopz = await Loopz.boot(\n    {\n      apiKey: "your-api-key",\n      privyAppId: "your-privy-app-id",\n      privyClientConfig: {\n        embeddedWallets: {\n          createOnLogin: "users-without-wallets",\n        },\n      },\n      intl: { locale: "en", messages: {} },\n      logoURL: "https://your-domain.com/logo.png",\n      tosURL: "https://your-domain.com/terms",\n      privacyURL: "https://your-domain.com/privacy",\n    },\n    {\n      devMode: true,\n      runAdapter: true, // Set to false in React environments\n    }\n  )\n\n  // Initialize modules\n  const { auth, chat, order, proposal } = loopz.init()\n\n  return { auth, chat, order, proposal }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-2-authentication",children:"Step 2: Authentication"}),"\n",(0,i.jsx)(e.h3,{id:"using-react-hooks",children:"Using React Hooks"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:'import { useLoopzAuth } from "@salad-labs/loopz-typescript"\n\nfunction LoginComponent() {\n  const { isAuthenticated, isLoading, account, authenticate, logout } =\n    useLoopzAuth()\n\n  const handleLogin = async () => {\n    try {\n      const { auth, account } = await authenticate()\n      console.log("Logged in:", account.did)\n      console.log("Wallet address:", account.wallet)\n    } catch (error) {\n      console.error("Login failed:", error)\n    }\n  }\n\n  if (isLoading) return <div>Loading...</div>\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <div>\n          <p>Welcome, {account?.username || account?.wallet}</p>\n          <button onClick={logout}>Logout</button>\n        </div>\n      ) : (\n        <button onClick={handleLogin}>Connect Wallet</button>\n      )}\n    </div>\n  )\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"using-vanilla-javascript",children:"Using Vanilla JavaScript"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'// Authenticate user\nconst { auth, account } = await auth.authenticate()\n\n// Check authentication status\nif (auth.isAuthenticated()) {\n  console.log("User DID:", account.did)\n  console.log("Wallet:", account.wallet)\n}\n\n// Logout\nawait auth.logout()\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-3-setting-up-chat",children:"Step 3: Setting Up Chat"}),"\n",(0,i.jsx)(e.h3,{id:"using-react-hooks-1",children:"Using React Hooks"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:'import { useLoopzChat } from "@salad-labs/loopz-typescript"\n\nfunction ChatComponent() {\n  const { isConnected, isSynced, connect, sync } = useLoopzChat({\n    // Optional event handlers\n    onMessageReceived: (message) => {\n      console.log("New message:", message)\n    },\n    onConversationCreated: (conversation) => {\n      console.log("New conversation:", conversation)\n    },\n  })\n\n  useEffect(() => {\n    if (!isConnected) {\n      connect()\n        .then(() => sync())\n        .catch(console.error)\n    }\n  }, [isConnected])\n\n  return (\n    <div>\n      <p>Chat Status: {isConnected ? "Connected" : "Disconnected"}</p>\n      <p>Sync Status: {isSynced ? "Synced" : "Not synced"}</p>\n    </div>\n  )\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"creating-a-conversation",children:"Creating a Conversation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'import { useLoopz } from "@salad-labs/loopz-typescript"\n\nfunction CreateConversation() {\n  const { instance } = useLoopz()\n\n  const createNewConversation = async () => {\n    try {\n      const conversation = await instance.chat.createConversation({\n        name: "Trading Discussion",\n        description: "Let\'s discuss NFT trades",\n        members: ["user-did-1", "user-did-2"], // User DIDs\n      })\n\n      console.log("Created conversation:", conversation.id)\n    } catch (error) {\n      console.error("Failed to create conversation:", error)\n    }\n  }\n\n  return <button onClick={createNewConversation}>Start New Conversation</button>\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"sending-messages",children:"Sending Messages"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'const sendMessage = async (conversationId: string) => {\n  try {\n    const message = await instance.chat.createMessage({\n      conversationId,\n      content: "Hello! Anyone interested in trading?",\n      type: "TEXTUAL",\n    })\n\n    console.log("Message sent:", message.id)\n  } catch (error) {\n    console.error("Failed to send message:", error)\n  }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-4-creating-a-trade-proposal",children:"Step 4: Creating a Trade Proposal"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'import { useLoopz, useLoopzAuth } from "@salad-labs/loopz-typescript"\n\nfunction CreateProposal() {\n  const { instance } = useLoopz()\n  const { account } = useLoopzAuth()\n\n  const createTradeProposal = async () => {\n    try {\n      const proposal = await instance.proposal.create({\n        type: "TRADE",\n        networkId: "1", // Ethereum mainnet\n        creatorAddress: account.wallet,\n        expirationDate: Date.now() + 86400000, // 24 hours\n        assets: {\n          offered: [\n            {\n              token: "0x...", // NFT contract address\n              tokenId: "123",\n              amount: "1",\n              type: "ERC721",\n            },\n          ],\n          wanted: [\n            {\n              token: "0x...", // Token contract address\n              amount: "1000000000000000000", // 1 ETH in wei\n              type: "ERC20",\n            },\n          ],\n        },\n        messages: [{ type: "0" }], // Message type from MessageMap\n      })\n\n      console.log("Proposal created:", proposal.id)\n    } catch (error) {\n      console.error("Failed to create proposal:", error)\n    }\n  }\n\n  return <button onClick={createTradeProposal}>Create Trade Proposal</button>\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-5-handling-orders",children:"Step 5: Handling Orders"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'function OrderManagement() {\n  const { instance } = useLoopz()\n\n  // Create a buy order\n  const createBuyOrder = async () => {\n    const order = await instance.order.create({\n      type: "BUY",\n      asset: {\n        token: "0x...", // NFT contract\n        tokenId: "456",\n        type: "ERC721",\n      },\n      price: {\n        amount: "2000000000000000000", // 2 ETH\n        currency: "ETH",\n      },\n      expirationDate: Date.now() + 604800000, // 7 days\n    })\n\n    console.log("Order created:", order.id)\n  }\n\n  // Get user\'s orders\n  const getMyOrders = async () => {\n    const orders = await instance.order.getUserOrders()\n    console.log("My orders:", orders)\n  }\n\n  return (\n    <div>\n      <button onClick={createBuyOrder}>Create Buy Order</button>\n      <button onClick={getMyOrders}>View My Orders</button>\n    </div>\n  )\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"complete-example-trading-chat-room",children:"Complete Example: Trading Chat Room"}),"\n",(0,i.jsx)(e.p,{children:"Here's a complete example combining authentication, chat, and trading:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:'import React, { useState, useEffect } from "react"\nimport {\n  LoopzProvider,\n  useLoopzAuth,\n  useLoopzChat,\n  useLoopz,\n} from "@salad-labs/loopz-typescript"\n\nfunction TradingChatRoom() {\n  const { isAuthenticated, authenticate } = useLoopzAuth()\n  const { instance } = useLoopz()\n  const { isConnected, connect, sync } = useLoopzChat()\n  const [conversations, setConversations] = useState([])\n  const [activeConversation, setActiveConversation] = useState(null)\n  const [messages, setMessages] = useState([])\n\n  // Initialize chat when authenticated\n  useEffect(() => {\n    if (isAuthenticated && !isConnected) {\n      connect()\n        .then(() => sync())\n        .then(() => loadConversations())\n        .catch(console.error)\n    }\n  }, [isAuthenticated, isConnected])\n\n  const loadConversations = async () => {\n    const convs = await instance.chat.getConversations()\n    setConversations(convs)\n  }\n\n  const loadMessages = async (conversationId: string) => {\n    const msgs = await instance.chat.getMessages(conversationId)\n    setMessages(msgs)\n    setActiveConversation(conversationId)\n  }\n\n  const sendTradeProposal = async () => {\n    if (!activeConversation) return\n\n    // Create a trade proposal message\n    await instance.chat.createMessage({\n      conversationId: activeConversation,\n      type: "TRADE_PROPOSAL",\n      content: "Check out my trade offer!",\n      proposal: {\n        // Proposal details\n      },\n    })\n  }\n\n  if (!isAuthenticated) {\n    return <button onClick={authenticate}>Connect to Start Trading</button>\n  }\n\n  return (\n    <div className="trading-chat">\n      <div className="conversations-list">\n        {conversations.map((conv) => (\n          <div key={conv.id} onClick={() => loadMessages(conv.id)}>\n            {conv.name}\n          </div>\n        ))}\n      </div>\n\n      <div className="messages">\n        {messages.map((msg) => (\n          <div key={msg.id}>\n            <strong>{msg.user.username}:</strong> {msg.content}\n          </div>\n        ))}\n      </div>\n\n      <button onClick={sendTradeProposal}>Send Trade Proposal</button>\n    </div>\n  )\n}\n\n// App wrapper\nfunction App() {\n  const config = {\n    apiKey: process.env.NEXT_PUBLIC_LOOPZ_API_KEY!,\n    privyAppId: process.env.NEXT_PUBLIC_PRIVY_APP_ID!,\n    // ... rest of config\n  }\n\n  return (\n    <LoopzProvider config={config} chatConfig={{ autoConnect: true }}>\n      <TradingChatRoom />\n    </LoopzProvider>\n  )\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsx)(e.h3,{id:"not-initialized-error",children:'"Not initialized" Error'}),"\n",(0,i.jsx)(e.p,{children:"Ensure you're accessing SDK methods after initialization completes:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"const { initialized, instance } = useLoopz()\n\nif (!initialized) return <div>Loading SDK...</div>\n"})}),"\n",(0,i.jsx)(e.h3,{id:"chat-connection-failed",children:"Chat Connection Failed"}),"\n",(0,i.jsx)(e.p,{children:"Check that the user is authenticated before connecting:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"if (isAuthenticated && canChat) {\n  await connect()\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"missing-peer-dependencies",children:"Missing Peer Dependencies"}),"\n",(0,i.jsx)(e.p,{children:"Install all required peer dependencies:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"npm install react@^18 react-dom@^18 viem@^2.17.3\n"})}),"\n",(0,i.jsx)(e.h2,{id:"support",children:"Support"}),"\n",(0,i.jsx)(e.p,{children:"Need help?"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Open an ",(0,i.jsx)(e.a,{href:"https://github.com/Salad-Labs/loopz-typescript/issues",children:"issue on GitHub"})]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var o=t(6540);const i={},a=o.createContext(i);function s(n){const e=o.useContext(a);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),o.createElement(a.Provider,{value:e},n.children)}}}]);