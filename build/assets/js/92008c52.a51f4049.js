"use strict";(self.webpackChunksdk=self.webpackChunksdk||[]).push([[2404],{6521:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guides/trading","title":"Trading Guide","description":"Complete guide to NFT and token trading with the Loopz SDK","source":"@site/docs/guides/trading.md","sourceDirName":"guides","slug":"/guides/trading","permalink":"/loopz-docs/docs/guides/trading","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/trading.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"trading","title":"Trading Guide","sidebar_label":"Trading","sidebar_position":2,"keywords":["trading","NFT","marketplace","order","proposal","Seaport","OpenSea"],"description":"Complete guide to NFT and token trading with the Loopz SDK"},"sidebar":"tutorialSidebar","previous":{"title":"Chat","permalink":"/loopz-docs/docs/guides/chat"},"next":{"title":"Notifications","permalink":"/loopz-docs/docs/guides/notifications"}}');var t=r(4848),o=r(8453);const i={id:"trading",title:"Trading Guide",sidebar_label:"Trading",sidebar_position:2,keywords:["trading","NFT","marketplace","order","proposal","Seaport","OpenSea"],description:"Complete guide to NFT and token trading with the Loopz SDK"},a="Trading Guide",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Trading Flow",id:"trading-flow",level:2},{value:"Step 1: Wallet Connection",id:"step-1-wallet-connection",level:3},{value:"Step 2: Create a Trade Proposal",id:"step-2-create-a-trade-proposal",level:3},{value:"Step 3: Share Proposal in Chat",id:"step-3-share-proposal-in-chat",level:3},{value:"Step 4: Create an Order",id:"step-4-create-an-order",level:3},{value:"Step 5: Execute a Trade",id:"step-5-execute-a-trade",level:3},{value:"Asset Types",id:"asset-types",level:2},{value:"Complex Trades",id:"complex-trades",level:2},{value:"Multi-Asset Trades",id:"multi-asset-trades",level:3},{value:"Collection Offers",id:"collection-offers",level:3},{value:"Order Management",id:"order-management",level:2},{value:"List Orders",id:"list-orders",level:3},{value:"Get User Orders",id:"get-user-orders",level:3},{value:"Cancel Order",id:"cancel-order",level:3},{value:"Event Handling",id:"event-handling",level:2},{value:"Trading Rules &amp; Limitations",id:"trading-rules--limitations",level:2},{value:"Seaport Restrictions",id:"seaport-restrictions",level:3},{value:"Gas Optimization",id:"gas-optimization",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Integration with Chat",id:"integration-with-chat",level:2},{value:"Trade Negotiation Flow",id:"trade-negotiation-flow",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"trading-guide",children:"Trading Guide"})}),"\n",(0,t.jsx)(n.p,{children:"The Loopz SDK provides a comprehensive trading system built on OpenSea's Seaport protocol, enabling peer-to-peer NFT and token trading with integrated chat functionality."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The trading system consists of two main components:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Proposals"}),": Off-chain trade offers that can be shared and negotiated"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Orders"}),": On-chain orders executed through Seaport smart contracts"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Create Proposal] --\x3e B[Share in Chat]\n    B --\x3e C[Negotiate Terms]\n    C --\x3e D{Agreement?}\n    D --\x3e|Yes| E[Create Order]\n    D --\x3e|No| F[Modify Proposal]\n    F --\x3e B\n\n    E --\x3e G[Connect Wallet]\n    G --\x3e H[Sign Transaction]\n    H --\x3e I[Execute on Blockchain]\n    I --\x3e J[Trade Complete]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"trading-flow",children:"Trading Flow"}),"\n",(0,t.jsx)(n.h3,{id:"step-1-wallet-connection",children:"Step 1: Wallet Connection"}),"\n",(0,t.jsx)(n.p,{children:"Before creating orders, users must connect their wallet via Privy:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { useLoopzAuth, useLoopz } from "@salad-labs/loopz-typescript"\n\nfunction TradingComponent() {\n  const { account } = useLoopzAuth()\n  const { instance } = useLoopz()\n\n  const initializeTrading = async () => {\n    try {\n      // Get connected wallet\n      const wallets = account?.getActiveWallets()\n      if (!wallets || wallets.length === 0) {\n        console.log("Please connect your wallet first")\n        // This will trigger Privy wallet connection\n        return\n      }\n\n      const wallet = wallets[0]\n\n      // Initialize Order module with wallet\n      await instance.order.init(wallet)\n\n      console.log("Trading initialized with wallet:", wallet.address)\n    } catch (error) {\n      console.error("Failed to initialize trading:", error)\n    }\n  }\n\n  return <button onClick={initializeTrading}>Start Trading</button>\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-2-create-a-trade-proposal",children:"Step 2: Create a Trade Proposal"}),"\n",(0,t.jsx)(n.p,{children:"Proposals are off-chain trade offers that can be shared and discussed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { Proposal, MessageMap } from "@salad-labs/loopz-typescript"\n\nasync function createTradeProposal() {\n  const { instance } = useLoopz()\n  const { account } = useLoopzAuth()\n\n  try {\n    const proposal = await instance.proposal.create(\n      {\n        type: Proposal.PROPOSAL_TYPE.TRADE, // Trading type\n        networkId: "1", // Ethereum mainnet\n        creatorAddress: account.wallet,\n        expirationDate: Date.now() + 7 * 24 * 60 * 60 * 1000, // 7 days\n        assets: {\n          offered: [\n            {\n              token: "0x...", // NFT contract address\n              tokenId: "123",\n              amount: "1",\n              itemType: "ERC721",\n              name: "Cool NFT #123",\n              resourceUrl: "https://...", // NFT image\n            },\n          ],\n          wanted: [\n            {\n              token: "0x0000000000000000000000000000000000000000", // ETH\n              amount: "1000000000000000000", // 1 ETH in wei\n              itemType: "NATIVE",\n              amountHumanReadable: "1 ETH",\n            },\n          ],\n        },\n        messages: [\n          {\n            type: MessageMap.MESSAGE_MATRIX["10"], // "This may be perfect for you"\n          },\n        ],\n      },\n      "signed_message_here" // Signature for proposal\n    )\n\n    console.log("Proposal created:", proposal)\n    return proposal\n  } catch (error) {\n    console.error("Failed to create proposal:", error)\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-3-share-proposal-in-chat",children:"Step 3: Share Proposal in Chat"}),"\n",(0,t.jsx)(n.p,{children:"Share the proposal in a chat conversation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function shareProposalInChat(proposalId: string) {\n  const { instance } = useLoopz()\n\n  try {\n    // Get the proposal details\n    const proposal = await instance.proposal.get(proposalId)\n\n    // Create a message with the proposal\n    const message = await instance.chat.createMessage({\n      conversationId: "conversation_id_here",\n      type: "TRADE_PROPOSAL",\n      content: JSON.stringify({\n        proposalId: proposal.id,\n        message: "Check out my trade offer!",\n        assets: proposal.assets,\n      }),\n    })\n\n    console.log("Proposal shared in chat:", message)\n  } catch (error) {\n    console.error("Failed to share proposal:", error)\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-4-create-an-order",children:"Step 4: Create an Order"}),"\n",(0,t.jsx)(n.p,{children:"Convert a proposal to an on-chain order using Seaport:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function createOrder() {\n  const { instance } = useLoopz()\n  const { account } = useLoopzAuth()\n\n  try {\n    // Ensure wallet is connected\n    const wallet = account?.getActiveWallets()[0]\n    if (!wallet) throw new Error("No wallet connected")\n\n    // Initialize order module\n    await instance.order.init(wallet)\n\n    // Create order\n    const order = await instance.order.create(\n      wallet,\n      {\n        // Maker (seller) assets\n        address: account.wallet,\n        assets: [\n          {\n            token: "0x...", // NFT contract\n            identifier: "123", // Token ID\n            amount: "1",\n            itemType: "ERC721",\n          },\n        ],\n      },\n      {\n        // Taker (buyer) assets\n        address: "", // Empty = any taker\n        assets: [\n          {\n            token: "0x0000000000000000000000000000000000000000",\n            amount: "1000000000000000000", // 1 ETH\n            itemType: "NATIVE",\n          },\n        ],\n      },\n      7, // Expiration in days\n      [], // Additional fees (optional)\n      proposalId // Link to proposal (optional)\n    )\n\n    console.log("Order created:", {\n      orderId: order.orderId,\n      orderHash: order.hash,\n    })\n\n    return order\n  } catch (error) {\n    console.error("Failed to create order:", error)\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-5-execute-a-trade",children:"Step 5: Execute a Trade"}),"\n",(0,t.jsx)(n.p,{children:"Complete a trade by fulfilling an existing order:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function executeTrade(orderId: string) {\n  const { instance } = useLoopz()\n\n  try {\n    // Listen to order events\n    instance.order.on("onFulfillOrder", () => {\n      console.log("Order being fulfilled...")\n    })\n\n    instance.order.on("onExecuteAllActions", ({ transact }) => {\n      console.log("Transaction submitted:", transact.hash)\n    })\n\n    instance.order.on("onFinalizeError", ({ error }) => {\n      console.error("Trade failed:", error)\n    })\n\n    // Execute the trade\n    await instance.order.finalize(orderId)\n\n    console.log("Trade executed successfully!")\n  } catch (error) {\n    console.error("Failed to execute trade:", error)\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"asset-types",children:"Asset Types"}),"\n",(0,t.jsx)(n.p,{children:"The SDK supports various asset types:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// NFT (ERC721)\nconst nftAsset = {\n  token: "0x...", // Contract address\n  identifier: "123", // Token ID\n  amount: "1",\n  itemType: "ERC721",\n  name: "My NFT",\n  resourceUrl: "https://...",\n}\n\n// Semi-fungible Token (ERC1155)\nconst erc1155Asset = {\n  token: "0x...",\n  identifier: "456",\n  amount: "5", // Can trade multiple\n  itemType: "ERC1155",\n}\n\n// Fungible Token (ERC20)\nconst tokenAsset = {\n  token: "0x...", // Token contract\n  amount: "1000000", // Amount in smallest unit\n  itemType: "ERC20",\n  symbol: "USDC",\n}\n\n// Native Currency (ETH)\nconst ethAsset = {\n  token: "0x0000000000000000000000000000000000000000",\n  amount: "1000000000000000000", // 1 ETH in wei\n  itemType: "NATIVE",\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"complex-trades",children:"Complex Trades"}),"\n",(0,t.jsx)(n.h3,{id:"multi-asset-trades",children:"Multi-Asset Trades"}),"\n",(0,t.jsx)(n.p,{children:"Trade multiple assets in a single transaction:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const complexOrder = await instance.order.create(\n  wallet,\n  {\n    address: makerAddress,\n    assets: [\n      // Offering 2 NFTs\n      {\n        token: "0xNFT1...",\n        identifier: "100",\n        amount: "1",\n        itemType: "ERC721",\n      },\n      {\n        token: "0xNFT2...",\n        identifier: "200",\n        amount: "1",\n        itemType: "ERC721",\n      },\n    ],\n  },\n  {\n    address: "", // Any taker\n    assets: [\n      // Wanting 1 ETH + 1000 USDC\n      {\n        token: "0x0000000000000000000000000000000000000000",\n        amount: "1000000000000000000", // 1 ETH\n        itemType: "NATIVE",\n      },\n      {\n        token: "0xUSDC...",\n        amount: "1000000000", // 1000 USDC (6 decimals)\n        itemType: "ERC20",\n      },\n    ],\n  },\n  7 // 7 days expiration\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"collection-offers",children:"Collection Offers"}),"\n",(0,t.jsx)(n.p,{children:"Create offers for any NFT from a collection:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Note: Collection-wide offers require additional backend logic\n// The current SDK focuses on specific token trades\n"})}),"\n",(0,t.jsx)(n.h2,{id:"order-management",children:"Order Management"}),"\n",(0,t.jsx)(n.h3,{id:"list-orders",children:"List Orders"}),"\n",(0,t.jsx)(n.p,{children:"Get orders from the marketplace:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function getMarketOrders() {\n  const { instance } = useLoopz()\n\n  try {\n    const response = await instance.order.listOrders({\n      networkId: "1", // Ethereum mainnet\n      status: "active", // Order status\n      skip: 0,\n      take: 20,\n      // Optional filters\n      collections: [{ address: "0x...", networkId: "1" }],\n      order: {\n        direction: "DESC",\n        field: "createdAt",\n      },\n    })\n\n    console.log("Active orders:", response?.orders)\n    console.log("Total count:", response?.total)\n\n    return response\n  } catch (error) {\n    console.error("Failed to fetch orders:", error)\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-user-orders",children:"Get User Orders"}),"\n",(0,t.jsx)(n.p,{children:"Fetch orders for a specific user:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function getUserOrders(userDid: string) {\n  const { instance } = useLoopz()\n\n  try {\n    const response = await instance.order.listUserOrders({\n      networkId: "1",\n      did: userDid,\n      status: "*", // All statuses\n      skip: 0,\n      take: 50,\n    })\n\n    return response?.orders || []\n  } catch (error) {\n    console.error("Failed to fetch user orders:", error)\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"cancel-order",children:"Cancel Order"}),"\n",(0,t.jsx)(n.p,{children:"Cancel an active order:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function cancelOrder(orderId: string) {\n  const { instance } = useLoopz()\n\n  try {\n    // Listen to cancellation events\n    instance.order.on("onCancelOrders", ({ tx }) => {\n      console.log("Cancelling order...")\n    })\n\n    instance.order.on("onCancelOrdersMined", ({ receipt }) => {\n      console.log("Order cancelled:", receipt.transactionHash)\n    })\n\n    await instance.order.cancel(\n      orderId,\n      2000000, // Gas limit (optional)\n      null // Gas price (optional)\n    )\n\n    console.log("Order cancelled successfully")\n  } catch (error) {\n    console.error("Failed to cancel order:", error)\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"event-handling",children:"Event Handling"}),"\n",(0,t.jsx)(n.p,{children:"Listen to order lifecycle events:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'function setupOrderEventListeners() {\n  const { instance } = useLoopz()\n\n  // Order creation events\n  instance.order.on("onCreateOrder", (data) => {\n    console.log("Creating order...", data)\n  })\n\n  // Order fulfillment events\n  instance.order.on("onFulfillOrder", () => {\n    console.log("Fulfilling order...")\n  })\n\n  instance.order.on("onExecuteAllActions", ({ transact }) => {\n    console.log("Transaction hash:", transact.hash)\n  })\n\n  // Error events\n  instance.order.on("onFinalizeError", ({ error, typeError }) => {\n    console.error(`Error (${typeError}):`, error)\n  })\n\n  instance.order.on("onFulfillOrderError", ({ error }) => {\n    console.error("Fulfillment error:", error)\n  })\n\n  // Cleanup\n  return () => {\n    instance.order.off("onCreateOrder")\n    instance.order.off("onFulfillOrder")\n    instance.order.off("onExecuteAllActions")\n    instance.order.off("onFinalizeError")\n    instance.order.off("onFulfillOrderError")\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"trading-rules--limitations",children:"Trading Rules & Limitations"}),"\n",(0,t.jsx)(n.h3,{id:"seaport-restrictions",children:"Seaport Restrictions"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Maker Assets"}),": Cannot include ERC20 or NATIVE tokens"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Only NFTs (ERC721/ERC1155) in the offer"}),"\n",(0,t.jsx)(n.li,{children:"Tokens can only be on the taker (buyer) side"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"One Token Rule"}),": Only one party can include fungible tokens"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Either maker OR taker can have ERC20/NATIVE"}),"\n",(0,t.jsx)(n.li,{children:"Not both in the same trade"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// \u274c Invalid: Token in maker assets\nconst invalidOrder = {\n  maker: {\n    assets: [\n      {\n        itemType: "ERC20", // Not allowed!\n        token: "0x...",\n      },\n    ],\n  },\n}\n\n// \u2705 Valid: Token only in taker assets\nconst validOrder = {\n  maker: {\n    assets: [{ itemType: "ERC721" }], // NFTs only\n  },\n  taker: {\n    assets: [{ itemType: "NATIVE" }], // Tokens allowed\n  },\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"gas-optimization",children:"Gas Optimization"}),"\n",(0,t.jsx)(n.p,{children:"Configure block confirmations for transactions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Set custom confirmation blocks (default: 3)\ninstance.order.setBlocksNumberConfirmationRequired(6)\n\n// Custom gas settings\nawait instance.order.cancel(orderId, 3000000, "50000000000") // 50 gwei\n'})}),"\n",(0,t.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Approval Management"}),": Always check token approvals before trading"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Order Validation"}),": Verify order parameters before execution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Expiration Dates"}),": Set reasonable expiration times"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fee Verification"}),": Understand platform and creator fees"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network Confirmation"}),": Ensure correct network before transactions"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-chat",children:"Integration with Chat"}),"\n",(0,t.jsx)(n.h3,{id:"trade-negotiation-flow",children:"Trade Negotiation Flow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function negotiateTrade(conversationId: string) {\n  const { instance } = useLoopz()\n\n  // 1. Create initial proposal\n  const proposal = await createTradeProposal()\n\n  // 2. Share in chat\n  await instance.chat.createMessage({\n    conversationId,\n    type: "TRADE_PROPOSAL",\n    content: JSON.stringify({\n      proposalId: proposal.id,\n      message: "Interested in this trade?",\n      assets: proposal.assets,\n    }),\n  })\n\n  // 3. Listen for responses\n  instance.chat.on("messageReceived", async (message) => {\n    if (message.type === "TRADE_PROPOSAL") {\n      // Handle counter-proposal\n      console.log("Counter-proposal received:", message)\n    }\n  })\n\n  // 4. On agreement, create order\n  // ... create order flow\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Always Initialize"}),": Call ",(0,t.jsx)(n.code,{children:"order.init(wallet)"})," before trading"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle Errors"}),": Implement comprehensive error handling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event Cleanup"}),": Remove event listeners when done"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User Feedback"}),": Show transaction status to users"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Price Validation"}),": Verify asset values before execution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network Checks"}),": Confirm correct blockchain network"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:'"init() must be called"'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Always initialize first\nawait instance.order.init(wallet)\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:'"Cannot add ERC20 token in maker assets"'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Move tokens to taker side"}),"\n",(0,t.jsx)(n.li,{children:"Maker can only offer NFTs"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:'"Account must be initialized"'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure user is authenticated"}),"\n",(0,t.jsxs)(n.li,{children:["Check ",(0,t.jsx)(n.code,{children:"isAuthenticated"})," status"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Transaction Failures"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Check wallet balance"}),"\n",(0,t.jsx)(n.li,{children:"Verify token approvals"}),"\n",(0,t.jsx)(n.li,{children:"Ensure correct network"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Explore ",(0,t.jsx)(n.a,{href:"/loopz-docs/docs/guides/chat",children:"Chat Integration"})," for trade discussions"]}),"\n",(0,t.jsxs)(n.li,{children:["Check ",(0,t.jsx)(n.a,{href:"/loopz-docs/docs/use-cases",children:"Use Cases"})," for real-world examples"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const t={},o=s.createContext(t);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);