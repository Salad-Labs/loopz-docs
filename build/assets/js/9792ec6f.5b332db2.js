"use strict";(self.webpackChunksdk=self.webpackChunksdk||[]).push([[8542],{8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>c});var t=i(6540);const o={},s=t.createContext(o);function a(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),t.createElement(s.Provider,{value:e},n.children)}},9271:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>f,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"guides/notifications","title":"Notifications Guide","description":"Guide to real-time notifications in the Loopz SDK","source":"@site/docs/guides/notification.md","sourceDirName":"guides","slug":"/guides/notifications","permalink":"/loopz-docs/docs/guides/notifications","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/notification.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"notifications","title":"Notifications Guide","sidebar_label":"Notifications","sidebar_position":5,"keywords":["notifications","websocket","real-time","alerts","messages"],"description":"Guide to real-time notifications in the Loopz SDK"},"sidebar":"tutorialSidebar","previous":{"title":"Trading","permalink":"/loopz-docs/docs/guides/trading"},"next":{"title":"Use Cases","permalink":"/loopz-docs/docs/use-cases"}}');var o=i(4848),s=i(8453);const a={id:"notifications",title:"Notifications Guide",sidebar_label:"Notifications",sidebar_position:5,keywords:["notifications","websocket","real-time","alerts","messages"],description:"Guide to real-time notifications in the Loopz SDK"},c="Notifications Guide",r={},l=[{value:"Overview",id:"overview",level:2},{value:"Notification Types",id:"notification-types",level:2},{value:"Main Types",id:"main-types",level:3},{value:"Subtypes",id:"subtypes",level:3},{value:"Initializing Notifications",id:"initializing-notifications",level:2},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Connection Events",id:"connection-events",level:3},{value:"Handling Notifications",id:"handling-notifications",level:2},{value:"Basic Message Handler",id:"basic-message-handler",level:3},{value:"Type-Specific Handlers",id:"type-specific-handlers",level:3},{value:"Notification UI Components",id:"notification-ui-components",level:2},{value:"Notification Bell",id:"notification-bell",level:3},{value:"Notification List",id:"notification-list",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Notification Settings",id:"notification-settings",level:3},{value:"Notification Persistence",id:"notification-persistence",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Connection Recovery",id:"connection-recovery",level:3},{value:"Error Notifications",id:"error-notifications",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Integration with Other Features",id:"integration-with-other-features",level:2},{value:"Chat Integration",id:"chat-integration",level:3},{value:"Trade Notifications",id:"trade-notifications",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"notifications-guide",children:"Notifications Guide"})}),"\n",(0,o.jsx)(e.p,{children:"The Loopz SDK provides a real-time notification system via WebSocket connections, allowing your application to receive instant updates about trades, messages, and system events."}),"\n",(0,o.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(e.p,{children:"The notification system:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Uses WebSocket for real-time communication"}),"\n",(0,o.jsx)(e.li,{children:"Requires authenticated users (JWT token)"}),"\n",(0,o.jsx)(e.li,{children:"Handles different notification types (deals, posts, account, system)"}),"\n",(0,o.jsx)(e.li,{children:"Provides event-based message handling"}),"\n",(0,o.jsx)(e.li,{children:"Automatically manages connection lifecycle"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"notification-types",children:"Notification Types"}),"\n",(0,o.jsx)(e.p,{children:"The SDK supports several notification types and subtypes:"}),"\n",(0,o.jsx)(e.h3,{id:"main-types",children:"Main Types"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'enum NotificationType {\n  DEAL = "0", // Trade-related notifications\n  POST = "1", // Post/content notifications\n  ACCOUNT = "2", // Account-related notifications\n  SYSTEM = "3", // System messages\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"subtypes",children:"Subtypes"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'enum NotificationSubType {\n  // Deal notifications\n  MAKER_CREATED_DEAL = "0",\n  TAKER_ACCEPTED_DEAL = "1",\n\n  // Post notifications\n  CREATOR_THREAD_PUT_LIKE = "0",\n  CREATOR_THREAD_PUT_NO_LIKE = "1",\n  THREAD_HAS_NEW_REPLY = "2",\n  CREATOR_THREAD_ACCEPTED_REPLY = "3",\n  SOMEONE_CREATED_THREAD = "4",\n  FOLLOWED_CREATED_THREAD = "5",\n\n  // Account notifications\n  SOMEONE_FOLLOWED_YOU = "0",\n\n  // System notifications\n  SYSTEM = "0",\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"initializing-notifications",children:"Initializing Notifications"}),"\n",(0,o.jsx)(e.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'import { useLoopz, useLoopzAuth } from "@salad-labs/loopz-typescript"\n\nfunction NotificationManager() {\n  const { instance } = useLoopz()\n  const { isAuthenticated } = useLoopzAuth()\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // Initialize WebSocket connection\n      instance.notification.init()\n\n      // Cleanup on unmount\n      return () => {\n        instance.notification.close()\n      }\n    }\n  }, [isAuthenticated])\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"connection-events",children:"Connection Events"}),"\n",(0,o.jsx)(e.p,{children:"Monitor WebSocket connection status:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'function useNotificationConnection() {\n  const { instance } = useLoopz()\n  const [isConnected, setIsConnected] = useState(false)\n\n  useEffect(() => {\n    // Connection opened\n    const openKey = instance.notification.onOpenConnection((event) => {\n      console.log("Notification connection established")\n      setIsConnected(true)\n    })\n\n    // Connection closed\n    const closeKey = instance.notification.onCloseConnection((event) => {\n      console.log("Notification connection closed", event.code, event.reason)\n      setIsConnected(false)\n\n      // Reconnect logic if needed\n      if (event.code !== 1000) {\n        // Abnormal closure\n        setTimeout(() => {\n          instance.notification.init()\n        }, 5000)\n      }\n    })\n\n    // Cleanup\n    return () => {\n      if (openKey) instance.notification.offOpenConnection(openKey)\n      if (closeKey) instance.notification.offCloseConnection(closeKey)\n    }\n  }, [])\n\n  return isConnected\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"handling-notifications",children:"Handling Notifications"}),"\n",(0,o.jsx)(e.h3,{id:"basic-message-handler",children:"Basic Message Handler"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'function useNotifications() {\n  const { instance } = useLoopz()\n  const [notifications, setNotifications] = useState<NotificationItem[]>([])\n\n  useEffect(() => {\n    const messageKey = instance.notification.onMessage((message) => {\n      console.log("New notification:", message)\n\n      // Parse the notification\n      const notification = parseNotification(message)\n\n      // Update state\n      setNotifications((prev) => [notification, ...prev])\n\n      // Handle different types\n      handleNotificationByType(notification)\n    })\n\n    return () => {\n      if (messageKey) {\n        instance.notification.offMessage(messageKey)\n      }\n    }\n  }, [])\n\n  return notifications\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"type-specific-handlers",children:"Type-Specific Handlers"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'function handleNotificationByType(notification: NotificationItem) {\n  switch (notification.type) {\n    case NotificationType.DEAL:\n      handleDealNotification(notification)\n      break\n\n    case NotificationType.POST:\n      handlePostNotification(notification)\n      break\n\n    case NotificationType.ACCOUNT:\n      handleAccountNotification(notification)\n      break\n\n    case NotificationType.SYSTEM:\n      handleSystemNotification(notification)\n      break\n  }\n}\n\nfunction handleDealNotification(notification: NotificationItem) {\n  switch (notification.subType) {\n    case NotificationSubType.MAKER_CREATED_DEAL:\n      // Someone created a deal\n      showToast(`New deal created: ${notification.message}`)\n      break\n\n    case NotificationSubType.TAKER_ACCEPTED_DEAL:\n      // Your deal was accepted\n      showToast(`Deal accepted!`, "success")\n      navigateToDeal(notification.operation?.dealId)\n      break\n  }\n}\n\nfunction handleAccountNotification(notification: NotificationItem) {\n  if (notification.subType === NotificationSubType.SOMEONE_FOLLOWED_YOU) {\n    showToast(`${notification.user?.username} started following you`)\n    updateFollowerCount()\n  }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"notification-ui-components",children:"Notification UI Components"}),"\n",(0,o.jsx)(e.h3,{id:"notification-bell",children:"Notification Bell"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'function NotificationBell() {\n  const [unreadCount, setUnreadCount] = useState(0)\n  const [showDropdown, setShowDropdown] = useState(false)\n  const notifications = useNotifications()\n\n  useEffect(() => {\n    const unread = notifications.filter((n) => n.isUnread).length\n    setUnreadCount(unread)\n  }, [notifications])\n\n  return (\n    <div className="notification-bell">\n      <button onClick={() => setShowDropdown(!showDropdown)}>\n        <BellIcon />\n        {unreadCount > 0 && <span className="badge">{unreadCount}</span>}\n      </button>\n\n      {showDropdown && (\n        <NotificationDropdown\n          notifications={notifications}\n          onClose={() => setShowDropdown(false)}\n        />\n      )}\n    </div>\n  )\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"notification-list",children:"Notification List"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'function NotificationList({\n  notifications,\n}: {\n  notifications: NotificationItem[]\n}) {\n  const groupedNotifications = groupNotificationsByDate(notifications)\n\n  return (\n    <div className="notification-list">\n      {Object.entries(groupedNotifications).map(([date, items]) => (\n        <div key={date}>\n          <h3>{formatDate(date)}</h3>\n          {items.map((notification) => (\n            <NotificationItem\n              key={notification.id}\n              notification={notification}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nfunction NotificationItem({\n  notification,\n}: {\n  notification: NotificationItem\n}) {\n  const icon = getNotificationIcon(notification.type)\n  const action = getNotificationAction(notification)\n\n  return (\n    <div\n      className={`notification-item ${notification.isUnread ? "unread" : ""}`}\n      onClick={action}\n    >\n      <div className="icon">{icon}</div>\n      <div className="content">\n        <p>{notification.message}</p>\n        <time>{formatTime(notification.date)}</time>\n      </div>\n    </div>\n  )\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,o.jsx)(e.h3,{id:"notification-settings",children:"Notification Settings"}),"\n",(0,o.jsx)(e.p,{children:"Allow users to configure their notification preferences:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'function NotificationSettings() {\n  const { account } = useLoopzAuth()\n  const [settings, setSettings] = useState({\n    proposalNotifications: true,\n    orderNotifications: true,\n    followNotifications: true,\n    systemNotifications: true,\n  })\n\n  const updateSetting = async (key: string, value: boolean) => {\n    try {\n      // Update in backend\n      await account?.updateSettings(\n        `${key}Push` as any, // e.g., \'proposalNotificationPush\'\n        value\n      )\n\n      // Update local state\n      setSettings((prev) => ({ ...prev, [key]: value }))\n\n      showToast("Settings updated")\n    } catch (error) {\n      console.error("Failed to update settings:", error)\n    }\n  }\n\n  return (\n    <div className="notification-settings">\n      <h2>Notification Preferences</h2>\n\n      <Toggle\n        label="Trade Proposals"\n        checked={settings.proposalNotifications}\n        onChange={(v) => updateSetting("proposalNotification", v)}\n      />\n\n      <Toggle\n        label="Order Updates"\n        checked={settings.orderNotifications}\n        onChange={(v) => updateSetting("orderNotification", v)}\n      />\n\n      <Toggle\n        label="New Followers"\n        checked={settings.followNotifications}\n        onChange={(v) => updateSetting("followNotification", v)}\n      />\n\n      <Toggle\n        label="System Messages"\n        checked={settings.systemNotifications}\n        onChange={(v) => updateSetting("generalNotification", v)}\n      />\n    </div>\n  )\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"notification-persistence",children:"Notification Persistence"}),"\n",(0,o.jsx)(e.p,{children:"Store notifications locally for offline access:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'function usePersistedNotifications() {\n  const [notifications, setNotifications] = useState<NotificationItem[]>([])\n\n  // Load from localStorage on mount\n  useEffect(() => {\n    const stored = localStorage.getItem("notifications")\n    if (stored) {\n      setNotifications(JSON.parse(stored))\n    }\n  }, [])\n\n  // Save to localStorage on change\n  useEffect(() => {\n    localStorage.setItem("notifications", JSON.stringify(notifications))\n  }, [notifications])\n\n  // Listen for new notifications\n  useEffect(() => {\n    const key = instance.notification.onMessage((message) => {\n      const notification = parseNotification(message)\n\n      setNotifications((prev) => {\n        // Keep only last 100 notifications\n        const updated = [notification, ...prev].slice(0, 100)\n        return updated\n      })\n    })\n\n    return () => instance.notification.offMessage(key)\n  }, [])\n\n  const markAsRead = (id: number) => {\n    setNotifications((prev) =>\n      prev.map((n) => (n.id === id ? { ...n, isUnread: false } : n))\n    )\n  }\n\n  const clearAll = () => {\n    setNotifications([])\n    localStorage.removeItem("notifications")\n  }\n\n  return { notifications, markAsRead, clearAll }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,o.jsx)(e.h3,{id:"connection-recovery",children:"Connection Recovery"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'function useResilientNotifications() {\n  const { instance } = useLoopz()\n  const { isAuthenticated } = useLoopzAuth()\n  const reconnectAttempts = useRef(0)\n  const maxReconnectAttempts = 5\n\n  const connect = useCallback(() => {\n    if (!isAuthenticated) return\n\n    try {\n      instance.notification.init()\n      reconnectAttempts.current = 0\n    } catch (error) {\n      console.error("Failed to initialize notifications:", error)\n    }\n  }, [isAuthenticated])\n\n  useEffect(() => {\n    connect()\n\n    const closeKey = instance.notification.onCloseConnection((event) => {\n      if (event.code === 1000) return // Normal closure\n\n      if (reconnectAttempts.current < maxReconnectAttempts) {\n        reconnectAttempts.current++\n        const delay = Math.min(\n          1000 * Math.pow(2, reconnectAttempts.current),\n          30000\n        )\n\n        console.log(\n          `Reconnecting in ${delay}ms (attempt ${reconnectAttempts.current})`\n        )\n        setTimeout(connect, delay)\n      } else {\n        console.error("Max reconnection attempts reached")\n        showError("Connection to notification service lost")\n      }\n    })\n\n    return () => {\n      instance.notification.offCloseConnection(closeKey)\n      instance.notification.close()\n    }\n  }, [connect])\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"error-notifications",children:"Error Notifications"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'function NotificationErrorBoundary({ children }: { children: ReactNode }) {\n  const [hasError, setHasError] = useState(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    const handleError = (event: ErrorEvent) => {\n      if (event.error?.message?.includes("notification")) {\n        setHasError(true)\n        setError(event.error)\n      }\n    }\n\n    window.addEventListener("error", handleError)\n    return () => window.removeEventListener("error", handleError)\n  }, [])\n\n  if (hasError) {\n    return (\n      <div className="notification-error">\n        <p>Notification service is temporarily unavailable</p>\n        <button onClick={() => window.location.reload()}>Reload Page</button>\n      </div>\n    )\n  }\n\n  return children\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Connection Management"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Initialize notifications only after authentication"}),"\n",(0,o.jsx)(e.li,{children:"Always clean up connections on component unmount"}),"\n",(0,o.jsx)(e.li,{children:"Implement reconnection logic for resilience"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Performance"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Limit stored notifications (e.g., last 100)"}),"\n",(0,o.jsx)(e.li,{children:"Use pagination for notification history"}),"\n",(0,o.jsx)(e.li,{children:"Debounce notification updates"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"User Experience"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Show connection status to users"}),"\n",(0,o.jsx)(e.li,{children:"Provide clear notification preferences"}),"\n",(0,o.jsx)(e.li,{children:"Use sound/vibration for important notifications"}),"\n",(0,o.jsx)(e.li,{children:"Group notifications by type/date"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Security"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Never expose JWT tokens in notifications"}),"\n",(0,o.jsx)(e.li,{children:"Validate notification data before rendering"}),"\n",(0,o.jsx)(e.li,{children:"Sanitize user-generated content in messages"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"integration-with-other-features",children:"Integration with Other Features"}),"\n",(0,o.jsx)(e.h3,{id:"chat-integration",children:"Chat Integration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// Show notification when new chat message arrives\nfunction useChatNotifications() {\n  const { instance } = useLoopz()\n\n  useEffect(() => {\n    instance.chat.on("messageReceived", (message) => {\n      // Create a notification\n      showNotification({\n        title: "New Message",\n        body: `${message.user.username}: ${message.content}`,\n        icon: message.user.avatarURL,\n        onClick: () => navigateToChat(message.conversationId),\n      })\n    })\n  }, [])\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"trade-notifications",children:"Trade Notifications"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// Alert when trade status changes\nfunction useTradeNotifications() {\n  const notifications = useNotifications()\n\n  useEffect(() => {\n    const tradeNotifications = notifications.filter(\n      (n) => n.type === NotificationType.DEAL\n    )\n\n    tradeNotifications.forEach((notification) => {\n      if (notification.subType === NotificationSubType.TAKER_ACCEPTED_DEAL) {\n        // Play success sound\n        playSound("success")\n\n        // Show prominent alert\n        showAlert({\n          type: "success",\n          title: "Trade Accepted!",\n          message:\n            "Your trade has been accepted. Proceed to complete the transaction.",\n          action: () => navigateToTrade(notification.operation?.dealId),\n        })\n      }\n    })\n  }, [notifications])\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Explore ",(0,o.jsx)(e.a,{href:"/loopz-docs/docs/guides/chat",children:"Chat Features"})," for messaging integration"]}),"\n",(0,o.jsxs)(e.li,{children:["Learn about ",(0,o.jsx)(e.a,{href:"/loopz-docs/docs/guides/trading",children:"Trading"})," for trade notifications"]}),"\n"]})]})}function f(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);